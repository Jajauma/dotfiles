if &compatible
    set nocompatible
endif

let s:vimfiles_path = fnamemodify(resolve(expand('<sfile>:p')), ':h')

" Relocate state files to persistent directory
let s:tmp_path = glob(s:vimfiles_path . '/tmp')
let &viminfo .= ',n' . s:tmp_path . '/viminfo'
let &directory = s:tmp_path . '//'

if &t_Co > 2 || has('gui_running')
    syntax on
endif

filetype plugin indent on
set autoindent
set encoding=utf8
set expandtab shiftwidth=4
set fileformats=unix,dos
set formatoptions=tcqj
set history=10000
set hlsearch
set incsearch
set laststatus=2
set list
set listchars=tab:»\ ,trail:·
set modeline
set noesckeys " possibly helps with slow leave from insert mode
set nowrapscan
set relativenumber
set shortmess-=S
set showcmd
set statusline=%<%n\ %F\ %y%m%r%=%-14.(%l,%c%V%)\ %P
set ttyfast
set visualbell t_vb=

" use forward slash for path separator
if has('win32') && exists('+shellslash')
    set shellslash
endif

" :terminal configuration and workarounds
if has('terminal')
    if has('win32') && executable('pwsh')
        nnoremap <silent> <leader>t :term ++close pwsh -nologo<CR>
        nnoremap <silent> <leader>T :vert term ++close pwsh -nologo<CR>
        " fix erase last word with Ctrl+BackSpace
        tmap <expr> <C-BS> SendToTerm("\<C-W>")
        " fix typing occasional Shift+Space
        tmap <expr> <S-Space> SendToTerm("\<Space>")
    endif
    func SendToTerm(what)
        call term_sendkeys('', a:what)
        return ''
    endfunc
    if exists('##TerminalWinOpen')
        augroup vim_terminal
            autocmd!
            au TerminalWinOpen * setlocal nonumber norelativenumber
        augroup END
    endif
endif

" reset search highlight
nnoremap <silent> <Esc><Esc> :nohlsearch<CR>
" saner search (n always jumps forward, N always jump backwards)
nnoremap <expr> n 'Nn'[v:searchforward]
nnoremap <expr> N 'nN'[v:searchforward]
" quick save
nnoremap <silent> <F2> :update<CR>
" quickfix navigation
nnoremap <F7> :cprevious<CR>
nnoremap <F8> :cnext<CR>
" fix accidental :E to be :e
cnoreabbrev E e

" insert directory of the current file in the command line
cnoremap <C-H> <C-R>=GetCurrentFileDirectory()<CR>
function! GetCurrentFileDirectory()
    let expanded_result = expand('%:~:.:h')
    return expanded_result == '' ? './' : expanded_result . '/'
endfunction
